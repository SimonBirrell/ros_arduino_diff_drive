A simple driver for an Arduino controlled differential drive robot.
Uses rosserial and assumes the use of an Arduino Mega + Pololu motor
controller shield + Robogaia Mega Encoder shield.

Installation
============

$ roscd ~/ros_workspace

$ git clone https://github.com/hbrobotics/ros_arduino_diff_drive.git

$ cd ros_arduino_diff_drive

$ rosmake

$ rosrun rosserial_client make_library.py SKETCHBOOK_PATH/libraries ros_arduino_diff_drive

where SKETCHBOOK_PATH is the path to your Arduino sketchbook directory.

$ cd SKETCHBOOK_PATH

$ ln -s `rospack find ros_arduino_diff_drive`/src/libraries/ROSArduinoDiffDrive .

Starting the Diff Controller
============================

* Make sure you have already installed the DualVNH5019MotorShield and MegaEncoderCounter libraries into your Arduino sketchbook/libraries folder

* Launch the Arduino 1.0 IDE and load the ROSArduinoDiffDrive sketch

* Compile and upload the sketch to your Arduino Mega

* In a terminal window run rosserial with the following launch command:

$ roslaunch ros_arduino_diff_drive diff_drive.launch

You should see the following output:

process[serial_node-1]: started with pid [20785]
process[odomlite_to_odom-2]: started with pid [20786]
[INFO] [WallTime: 1355104107.728580] ROS Serial Python Node
[INFO] [WallTime: 1355104107.729058] Connected on /dev/ttyACM0 at 57600 baud
[INFO] [WallTime: 1355104109.901648] Note: publish buffer size is 512 bytes
[INFO] [WallTime: 1355104109.901915] Setup publisher on odometry_lite [ros_arduino_diff_drive/OdometryLite]
[INFO] [WallTime: 1355104109.904670] Note: subscribe buffer size is 512 bytes
[INFO] [WallTime: 1355104109.904942] Setup subscriber on /cmd_vel [geometry_msgs/Twist]

Sending Twist Commands and Viewing Odometry Data
================================================

Place your robot on blocks, then try publishing a Twist command:

$ rostopic pub -1 /cmd_vel geometry_msgs/Twist '{ linear: {x: 0.1} }'

Stop the robot with the command:

$ rostopic pub -1 /cmd_vel geometry_msgs/Twist '{ linear: {x: 0.0} }'

To view odometry data:

$ rostopic echo /odom

or

$ rxplot -p 60 /odom/pose/pose/position/x:y, /odom/twist/twist/linear/x, /odom/twist/twist/angular/z

